# alembic/versions/0225bad5f296_add_template_table.py
# --- CORRECTED ---

"""Add template table

Revision ID: 0225bad5f296
Revises: 19ba8ab4bfcc
Create Date: 2025-05-04 17:09:30.300416

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Keep this import as Alembic used it

# revision identifiers, used by Alembic.
revision: str = '0225bad5f296'
down_revision: Union[str, None] = '19ba8ab4bfcc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - START ###

    # --- MANUALLY ADD CREATE TYPE STATEMENTS ---
    # Ensure these type names match the 'name=' argument in the postgresql.ENUM below
    op.execute("CREATE TYPE templatetype AS ENUM('EMAIL')")
    op.execute("""
        CREATE TYPE templateeventtrigger AS ENUM(
            'APPOINTMENT_BOOKED_CLIENT', 'APPOINTMENT_BOOKED_ADMIN',
            'APPOINTMENT_REMINDER_CLIENT', 'APPOINTMENT_CANCELLED_CLIENT',
            'APPOINTMENT_CANCELLED_ADMIN', 'APPOINTMENT_UPDATED_CLIENT',
            'APPOINTMENT_UPDATED_ADMIN', 'CLIENT_CONFIRMATION'
        )
    """)
    # --- END MANUAL ADDITION ---

    op.create_table('templates',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('tenant_id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False, comment="User-friendly name for the template (e.g., 'Client Booking Confirmation')"),
        # Reference the type using postgresql.ENUM as generated by Alembic
        # Ensure create_type=False so Alembic doesn't try to create it again
        sa.Column('type', postgresql.ENUM('EMAIL', name='templatetype', create_type=False), server_default='EMAIL', nullable=False), # Changed server_default to match ENUM value
        sa.Column('event_trigger', postgresql.ENUM('APPOINTMENT_BOOKED_CLIENT', 'APPOINTMENT_BOOKED_ADMIN', 'APPOINTMENT_REMINDER_CLIENT', 'APPOINTMENT_CANCELLED_CLIENT', 'APPOINTMENT_CANCELLED_ADMIN', 'APPOINTMENT_UPDATED_CLIENT', 'APPOINTMENT_UPDATED_ADMIN', 'CLIENT_CONFIRMATION', name='templateeventtrigger', create_type=False), nullable=False, comment='The specific event that this template is used for'),
        sa.Column('email_subject', sa.String(), nullable=True, comment='Subject line for email templates (can contain placeholders)'),
        sa.Column('email_body', sa.Text(), nullable=False, comment='Body content for the template (HTML or plain text, with placeholders)'),
        sa.Column('is_default_template', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Is this a system default or tenant created?'), # Use sa.text for bool defaults
        sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False, comment='Allows tenants to disable a specific notification'), # Use sa.text for bool defaults
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], name=op.f('fk_templates_tenant_id_tenants'), ondelete='CASCADE'), # Added explicit constraint name using op.f()
        sa.PrimaryKeyConstraint('id', name=op.f('pk_templates')), # Added explicit constraint name using op.f()
        sa.UniqueConstraint('tenant_id', 'event_trigger', 'type', name='uq_template_tenant_trigger_type')
    )
    # Use op.f() for autogenerated index names for consistency
    op.create_index(op.f('ix_templates_event_trigger'), 'templates', ['event_trigger'], unique=False)
    op.create_index(op.f('ix_templates_id'), 'templates', ['id'], unique=False)
    op.create_index(op.f('ix_templates_tenant_id'), 'templates', ['tenant_id'], unique=False)
    op.create_index('ix_templates_tenant_id_trigger_type', 'templates', ['tenant_id', 'event_trigger', 'type'], unique=False)
    # ### commands auto generated by Alembic - END ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - START ###
    op.drop_index('ix_templates_tenant_id_trigger_type', table_name='templates')
    op.drop_index(op.f('ix_templates_tenant_id'), table_name='templates')
    op.drop_index(op.f('ix_templates_id'), table_name='templates')
    op.drop_index(op.f('ix_templates_event_trigger'), table_name='templates')
    op.drop_table('templates')
    # ### commands auto generated by Alembic - END ###

    # --- MANUALLY ADD DROP TYPE STATEMENTS ---
    # Drop the ENUM types AFTER dropping the table
    op.execute("DROP TYPE templateeventtrigger")
    op.execute("DROP TYPE templatetype")
    # --- END MANUAL ADDITION ---
