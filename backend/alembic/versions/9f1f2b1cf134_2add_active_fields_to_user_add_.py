"""2add_active_fields_to_user_add_timestamps

Revision ID: 9f1f2b1cf134
Revises: d821e433a8c8
Create Date: 2025-05-23 01:19:47.979985

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import func

# revision identifiers, used by Alembic.
revision: str = '9f1f2b1cf134'
down_revision: Union[str, None] = 'd821e433a8c8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False, default=True))
    op.add_column('users', sa.Column('activated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('created_by_user_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(timezone=True), server_default=func.now(), nullable=False))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=func.now(), onupdate=func.now(), nullable=False))
    
    # Add ForeignKeyConstraint for created_by_user_id
    op.create_foreign_key(
        constraint_name='fk_users_created_by_user_id_users', # Choose a constraint name
        source_table='users',
        referent_table='users',
        local_cols=['created_by_user_id'],
        remote_cols=['id']
    )
    
    # Add indexes if they weren't there before (your model now specifies them)
    # Check if they exist before creating to avoid errors if they were somehow added.
    # Better yet, Alembic usually handles index creation if they are new in the model.
    # If Alembic didn't auto-detect these index additions, you can add them:
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True) # unique=True was already on column
    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)

    # Make 'role' column non-nullable if it wasn't already
    # First, ensure existing NULL roles are updated to a default (e.g., 'staff')
    # op.execute("UPDATE users SET role = 'staff' WHERE role IS NULL") # Example if needed
    op.alter_column('users', 'role', nullable=False, server_default='staff') # Add server_default if it wasn't there
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    
    op.drop_constraint('fk_users_created_by_user_id_users', 'users', type_='foreignkey') # Match constraint_name
    
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'created_by_user_id')
    op.drop_column('users', 'activated_at')
    op.drop_column('users', 'is_active')

    # Revert role nullability if changed
    op.alter_column('users', 'role', nullable=True, server_default=None) # Or original server_default
    # ### end Alembic commands ###
